{"ast":null,"code":"import * as i0 from \"@angular/core\";\n// import interface OnInit\n// la vue est définie dans le template du composant, la logique de la vue sera pilotée par la classe du composant qui est défini plus bas. Si maj dans la ppt, le template se met à jour.\nexport class AppComponent {\n  constructor() {\n    // implements interface OnInit\n    // title = 'Application de pokémons';\n    // décla ppt title. Va venir remplacer la valeur dans le template: `<h1>Welcome to {{title}}!</h1>` \n    this.pokemonList = ['Bulbizarre', 'Salamèche', 'Carapuce'];\n  }\n  // propriété pokemons qui contient un tab de pokemons => envoie erreur car template lié à la ppt title ne peut pas fonctionner. Il faut pousser la ppt pokemons dans le template\n  ngOnInit() {\n    // console.table(pokemonList);\n    // erreur car la pokemonList n'existe pas = scope, la var est définie au dessus, il faut utiliser le this.\n    console.table(this.pokemonList);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 2,\n  vars: 1,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"Bienvenue sur \", ctx.pokemonList[1], \"!\");\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"names":["AppComponent","constructor","pokemonList","ngOnInit","console","table","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["C:\\Users\\utilisateur\\Desktop\\GIT\\ng-pokemon-app\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n// import interface OnInit\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  // template: `<h1>Bienvenue sur {{title}}!</h1>`\r\n  template: `<h1>Bienvenue sur {{ pokemonList[1] }}!</h1>`\r\n})\r\n// la vue est définie dans le template du composant, la logique de la vue sera pilotée par la classe du composant qui est défini plus bas. Si maj dans la ppt, le template se met à jour.\r\nexport class AppComponent implements OnInit {\r\n  // implements interface OnInit\r\n  // title = 'Application de pokémons';\r\n  // décla ppt title. Va venir remplacer la valeur dans le template: `<h1>Welcome to {{title}}!</h1>` \r\n  pokemonList = ['Bulbizarre', 'Salamèche', 'Carapuce'];\r\n  // propriété pokemons qui contient un tab de pokemons => envoie erreur car template lié à la ppt title ne peut pas fonctionner. Il faut pousser la ppt pokemons dans le template\r\n  ngOnInit(): void {\r\n    // console.table(pokemonList);\r\n    // erreur car la pokemonList n'existe pas = scope, la var est définie au dessus, il faut utiliser le this.\r\n    console.table(this.pokemonList);\r\n  }\r\n  // définition de la méthode associée à l'interface OnInit. Typage TS: la méthode ne renvoie rien = void\r\n}\r\n"],"mappings":";AACA;AAOA;AACA,OAAM,MAAOA,YAAY;EANzBC,YAAA;IAOE;IACA;IACA;IACA,KAAAC,WAAW,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,UAAU,CAAC;;EACrD;EACAC,QAAQA,CAAA;IACN;IACA;IACAC,OAAO,CAACC,KAAK,CAAC,IAAI,CAACH,WAAW,CAAC;EACjC;;AAVWF,YAAY,C;mBAAZA,YAAY;AAAA;AAAZA,YAAY,C;QAAZA,YAAY;EAAAM,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MAHZE,EAAA,CAAAC,cAAA,SAAI;MAAAD,EAAA,CAAAE,MAAA,GAAmC;MAAAF,EAAA,CAAAG,YAAA,EAAK;;;MAAxCH,EAAA,CAAAI,SAAA,GAAmC;MAAnCJ,EAAA,CAAAK,kBAAA,mBAAAN,GAAA,CAAAV,WAAA,SAAmC"},"metadata":{},"sourceType":"module","externalDependencies":[]}