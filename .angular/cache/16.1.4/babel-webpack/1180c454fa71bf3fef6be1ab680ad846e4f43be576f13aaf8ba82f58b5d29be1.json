{"ast":null,"code":"import { delay, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLoggedIn = false;\n  }\n  // si user demande à accèder à la liste des pokemons ou autre, et qu'il n'a pas le droit demande de co, et si co ok redir au bon endroit sur la page\n  login(name, password) {\n    const isLoggedIn = name == \"pikachu\" && password == 'pikachu';\n    // recup rst pour savoir si user auth ou non, puis délègue dans le tps d'une scd et ensuite mise à jour ppt isLoggedIn\n    return of(isLoggedIn).pipe(delay(1000), tap(isLoggedIn => this.isLoggedIn = isLoggedIn)\n    // simuler délai serveur\n    );\n  }\n\n  logout() {\n    this.isLoggedIn = false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["delay","of","tap","AuthService","constructor","isLoggedIn","login","name","password","pipe","logout","factory","ɵfac","providedIn"],"sources":["C:\\Users\\orion\\Desktop\\github\\ng-pokemon-app\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, delay, of, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  isLoggedIn: boolean = false;\r\n  // var qui dit si user est co ou non, par défaut à false, déco. Il doit prouver qu'il a les bons id\r\n  redirectUrl: string;\r\n  // si user demande à accèder à la liste des pokemons ou autre, et qu'il n'a pas le droit demande de co, et si co ok redir au bon endroit sur la page\r\n\r\n  login(name: string, password: string): Observable<boolean> {\r\n    const isLoggedIn = (name == \"pikachu\" && password =='pikachu');\r\n    // recup rst pour savoir si user auth ou non, puis délègue dans le tps d'une scd et ensuite mise à jour ppt isLoggedIn\r\n    return of(isLoggedIn).pipe\r\n      (delay(1000),\r\n      tap(isLoggedIn => this.isLoggedIn = isLoggedIn)\r\n    // simuler délai serveur\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    this.isLoggedIn = false;\r\n  }\r\n  // info reste appli au niveau authService user non co\r\n}\r\n"],"mappings":"AACA,SAAqBA,KAAK,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;AAKjD,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAKE,KAAAC,UAAU,GAAY,KAAK;;EAG3B;EAEAC,KAAKA,CAACC,IAAY,EAAEC,QAAgB;IAClC,MAAMH,UAAU,GAAIE,IAAI,IAAI,SAAS,IAAIC,QAAQ,IAAG,SAAU;IAC9D;IACA,OAAOP,EAAE,CAACI,UAAU,CAAC,CAACI,IAAI,CACvBT,KAAK,CAAC,IAAI,CAAC,EACZE,GAAG,CAACG,UAAU,IAAI,IAAI,CAACA,UAAU,GAAGA,UAAU;IAChD;KACG;EACL;;EAEAK,MAAMA,CAAA;IACJ,IAAI,CAACL,UAAU,GAAG,KAAK;EACzB;;AAnBWF,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}