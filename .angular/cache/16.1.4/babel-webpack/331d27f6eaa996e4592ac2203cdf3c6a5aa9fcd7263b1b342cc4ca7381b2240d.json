{"ast":null,"code":"import { Subject, debounceTime, distinctUntilChanged, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../pokemon.service\";\nimport * as i3 from \"@angular/common\";\nfunction SearchPokemonComponent_a_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 9);\n    i0.ɵɵlistener(\"click\", function SearchPokemonComponent_a_8_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const pokemon_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.goToDetail(pokemon_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const pokemon_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", pokemon_r2.name, \" \");\n  }\n}\nexport class SearchPokemonComponent {\n  // observable ne peut que être subscribe pour recevoir les données dans le temps \n  // {...pokemonList(a)..pokemonList(ab)..}\n  // sera vide au début\n  constructor(router, pokemonService) {\n    this.router = router;\n    this.pokemonService = pokemonService;\n    this.searchTerms = new Subject();\n  }\n  ngOnInit() {\n    this.pokemons$ = this.searchTerms.pipe(\n    // {...\"a\"..\"ab\"..\"abz\".\"abc\"...\"a\".....\"ab\"} chaque point rep le temps si délai court et changement faute de frappe. On ne veut pas effcetuer plusieurs appels au serveur. On va attendre avant de lancer la requête = debounceTime permet d'éliminier les recherches qui n'ont pas au mloins un certain nombre de ms d'attente après. supprime les termes de rech trop succints\n    debounceTime(300),\n    // {...\"a\"...\"a\".....\"ab\"} mais deux fois la même valeurs\n    // éliminer les recherches successivement identiques \n    distinctUntilChanged(),\n    //attend changement dans les termes de recherche {...\"a\"........\"ab\"} requête exacte au serveur\n    // map(term => this.pokemonService.searchPokemonList(term))\n    // sollicitation serveur mais map transf ab en un observable mais on ne veut pas un observable avec les rst dedans, on veut le tab de pokemon à l'int: concatMap, mergeMap ou switchMap on va dans la plupart des cas utiliser switchMap => user nvl recherche annulation de la dernière rech si en cours et venir effectuer uniquement la rech la plus récente et ne renvoie pas un flux\n    switchMap(term => this.pokemonService.searchPokemonList(term))\n    // {..pokemonList(a)}\n    );\n  }\n\n  search(term) {\n    this.searchTerms.next(term);\n    // on pousse le terme de recherche de l'user on aura le flux en sortie.\n  }\n\n  goToDetail(pokemon) {\n    const link = ['/pokemon', pokemon.id];\n    this.router.navigate(link);\n  } //quand user clique sur l'un des résultats des champs de recherche\n}\nSearchPokemonComponent.ɵfac = function SearchPokemonComponent_Factory(t) {\n  return new (t || SearchPokemonComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PokemonService));\n};\nSearchPokemonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SearchPokemonComponent,\n  selectors: [[\"app-search-pokemon\"]],\n  decls: 10,\n  vars: 3,\n  consts: [[1, \"row\"], [1, \"col\", \"s12\", \"m6\", \"offset-m3\"], [1, \"card\"], [1, \"card-content\"], [1, \"input-field\"], [\"placeholder\", \"Search a pokemon\", 3, \"keyup\"], [\"searchBox\", \"\"], [1, \"collection\"], [\"class\", \"collection-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"collection-item\", 3, \"click\"]],\n  template: function SearchPokemonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r5 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"input\", 5, 6);\n      i0.ɵɵlistener(\"keyup\", function SearchPokemonComponent_Template_input_keyup_5_listener() {\n        i0.ɵɵrestoreView(_r5);\n        const _r0 = i0.ɵɵreference(6);\n        return i0.ɵɵresetView(ctx.search(_r0.value));\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 7);\n      i0.ɵɵtemplate(8, SearchPokemonComponent_a_8_Template, 2, 1, \"a\", 8);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 1, ctx.pokemons$));\n    }\n  },\n  dependencies: [i3.NgForOf, i3.AsyncPipe],\n  encapsulation: 2\n});","map":{"version":3,"names":["Subject","debounceTime","distinctUntilChanged","switchMap","i0","ɵɵelementStart","ɵɵlistener","SearchPokemonComponent_a_8_Template_a_click_0_listener","restoredCtx","ɵɵrestoreView","_r4","pokemon_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","goToDetail","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","name","SearchPokemonComponent","constructor","router","pokemonService","searchTerms","ngOnInit","pokemons$","pipe","term","searchPokemonList","search","next","pokemon","link","id","navigate","ɵɵdirectiveInject","i1","Router","i2","PokemonService","selectors","decls","vars","consts","template","SearchPokemonComponent_Template","rf","ctx","SearchPokemonComponent_Template_input_keyup_5_listener","_r5","_r0","ɵɵreference","value","ɵɵtemplate","SearchPokemonComponent_a_8_Template","ɵɵproperty","ɵɵpipeBind1"],"sources":["C:\\Users\\utilisateur\\Desktop\\GIT\\ng-pokemon-app\\src\\app\\pokemon\\search-pokemon\\search-pokemon.component.ts","C:\\Users\\utilisateur\\Desktop\\GIT\\ng-pokemon-app\\src\\app\\pokemon\\search-pokemon\\search-pokemon.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Pokemon } from '../pokemon';\nimport { Router } from '@angular/router';\nimport { Observable, Subject, debounceTime, distinct, distinctUntilChanged, switchMap } from 'rxjs';\nimport { PokemonService } from '../pokemon.service';\n\n\n@Component({\n  selector: 'app-search-pokemon',\n  templateUrl: './search-pokemon.component.html',\n})\nexport class SearchPokemonComponent implements OnInit {\n\n  searchTerms = new Subject<string>();\n  // la classe Subject appartient à RxJS pas Angular, permet de stocker les recherches successives de l'user, stockées dans un tableau de string => flux dans le tps des recherches user  {...\"a\"..\"ab\"...} ce compoirte comme un observable sauf que le subject peut être consommé contrairement à l'observable. On oeut ainsi piloter un observable \n  pokemons$: Observable<Pokemon[]>;\n  // observable ne peut que être subscribe pour recevoir les données dans le temps \n  // {...pokemonList(a)..pokemonList(ab)..}\n  // sera vide au début\n\n  constructor(\n    private router: Router,\n    private pokemonService: PokemonService\n    ) {\n    \n  }\n\n  ngOnInit(): void {\n    this.pokemons$ = this.searchTerms.pipe(\n      // {...\"a\"..\"ab\"..\"abz\".\"abc\"...\"a\".....\"ab\"} chaque point rep le temps si délai court et changement faute de frappe. On ne veut pas effcetuer plusieurs appels au serveur. On va attendre avant de lancer la requête = debounceTime permet d'éliminier les recherches qui n'ont pas au mloins un certain nombre de ms d'attente après. supprime les termes de rech trop succints\n      debounceTime(300), // {...\"a\"...\"a\".....\"ab\"} mais deux fois la même valeurs\n      // éliminer les recherches successivement identiques \n      distinctUntilChanged(), //attend changement dans les termes de recherche {...\"a\"........\"ab\"} requête exacte au serveur\n      // map(term => this.pokemonService.searchPokemonList(term))\n      // sollicitation serveur mais map transf ab en un observable mais on ne veut pas un observable avec les rst dedans, on veut le tab de pokemon à l'int: concatMap, mergeMap ou switchMap on va dans la plupart des cas utiliser switchMap => user nvl recherche annulation de la dernière rech si en cours et venir effectuer uniquement la rech la plus récente et ne renvoie pas un flux\n      switchMap(term => this.pokemonService.searchPokemonList(term))\n      // {..pokemonList(a)}\n    );\n  }\n\n  search(term: string) {\n    this.searchTerms.next(term);\n    // on pousse le terme de recherche de l'user on aura le flux en sortie.\n  }\n\n  goToDetail(pokemon: Pokemon) {\n    const link = ['/pokemon', pokemon.id];\n    this.router.navigate(link);\n  } //quand user clique sur l'un des résultats des champs de recherche\n}\n","<div class=\"row\">\n    <div class=\"col s12 m6 offset-m3\">\n        <div class=\"card\">\n            <div class=\"card-content\">\n                <div class=\"input-field\">\n                <!-- #searchBox = var réf dans le template pour pousser le terme qui vient d'être tapé, on récupère sa valeur courante -->\n                    <input #searchBox \n                            (keyup)=\"search(searchBox.value)\" \n                            placeholder=\"Search a pokemon\"> \n                    <!-- affichage des rst: class collection et affcihage d'une liste de liens qui correspondent aux pokemons de la rech user, clique sur le lien redir sur le pokemon -->\n                    <div class=\"collection\">\n                        <!-- pokemons$ convention est un observable, flux de données var avec flux de données $ + pipe async => que sur flux de données, évite de faire subscribe (dans OnInit)-->\n                        <a *ngFor=\"let pokemon of pokemons$ | async\" \n                            (click)=\"goToDetail(pokemon)\"\n                            class=\"collection-item\"\n                        >\n                            {{ pokemon.name }}\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"],"mappings":"AAGA,SAAqBA,OAAO,EAAEC,YAAY,EAAYC,oBAAoB,EAAEC,SAAS,QAAQ,MAAM;;;;;;;;ICS3EC,EAAA,CAAAC,cAAA,WAGC;IAFGD,EAAA,CAAAE,UAAA,mBAAAC,uDAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,UAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAF,MAAA,CAAAG,UAAA,CAAAL,UAAA,CAAmB;IAAA,EAAC;IAG7BP,EAAA,CAAAa,MAAA,GACJ;IAAAb,EAAA,CAAAc,YAAA,EAAI;;;;IADAd,EAAA,CAAAe,SAAA,GACJ;IADIf,EAAA,CAAAgB,kBAAA,MAAAT,UAAA,CAAAU,IAAA,MACJ;;;ADNxB,OAAM,MAAOC,sBAAsB;EAKjC;EACA;EACA;EAEAC,YACUC,MAAc,EACdC,cAA8B;IAD9B,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,cAAc,GAAdA,cAAc;IATxB,KAAAC,WAAW,GAAG,IAAI1B,OAAO,EAAU;EAYnC;EAEA2B,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,IAAI;IACpC;IACA5B,YAAY,CAAC,GAAG,CAAC;IAAE;IACnB;IACAC,oBAAoB,EAAE;IAAE;IACxB;IACA;IACAC,SAAS,CAAC2B,IAAI,IAAI,IAAI,CAACL,cAAc,CAACM,iBAAiB,CAACD,IAAI,CAAC;IAC7D;KACD;EACH;;EAEAE,MAAMA,CAACF,IAAY;IACjB,IAAI,CAACJ,WAAW,CAACO,IAAI,CAACH,IAAI,CAAC;IAC3B;EACF;;EAEAd,UAAUA,CAACkB,OAAgB;IACzB,MAAMC,IAAI,GAAG,CAAC,UAAU,EAAED,OAAO,CAACE,EAAE,CAAC;IACrC,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAACF,IAAI,CAAC;EAC5B,CAAC,CAAC;;AArCSb,sBAAsB,C;mBAAtBA,sBAAsB,EAAAlB,EAAA,CAAAkC,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAApC,EAAA,CAAAkC,iBAAA,CAAAG,EAAA,CAAAC,cAAA;AAAA;AAAtBpB,sBAAsB,C;QAAtBA,sBAAsB;EAAAqB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;MCXnC7C,EAAA,CAAAC,cAAA,aAAiB;MAOWD,EAAA,CAAAE,UAAA,mBAAA6C,uDAAA;QAAA/C,EAAA,CAAAK,aAAA,CAAA2C,GAAA;QAAA,MAAAC,GAAA,GAAAjD,EAAA,CAAAkD,WAAA;QAAA,OAASlD,EAAA,CAAAW,WAAA,CAAAmC,GAAA,CAAAlB,MAAA,CAAAqB,GAAA,CAAAE,KAAA,CAAuB;MAAA,EAAC;MADzCnD,EAAA,CAAAc,YAAA,EAEuC;MAEvCd,EAAA,CAAAC,cAAA,aAAwB;MAEpBD,EAAA,CAAAoD,UAAA,IAAAC,mCAAA,eAKI;;MACRrD,EAAA,CAAAc,YAAA,EAAM;;;MANqBd,EAAA,CAAAe,SAAA,GAAoB;MAApBf,EAAA,CAAAsD,UAAA,YAAAtD,EAAA,CAAAuD,WAAA,OAAAT,GAAA,CAAAtB,SAAA,EAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}