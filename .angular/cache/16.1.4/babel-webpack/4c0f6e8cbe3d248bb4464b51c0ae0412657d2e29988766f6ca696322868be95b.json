{"ast":null,"code":"import { POKEMONS } from './mock-pokemon-list';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PokemonService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPokemonList() {\n    // renvoie model\n    // return POKEMONS;\n    // liste des pokémons, réencapsulée dans un service pour profiter du syst d'injection de dépendance\n  }\n  getPokemonById(pokemonId) {\n    return POKEMONS.find(pokemon => pokemon.id == pokemonId);\n  }\n  getPokemonTypeList() {\n    return ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n  }\n}\nPokemonService.ɵfac = function PokemonService_Factory(t) {\n  return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n};\nPokemonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PokemonService,\n  factory: PokemonService.ɵfac\n});","map":{"version":3,"names":["POKEMONS","PokemonService","constructor","http","getPokemonList","getPokemonById","pokemonId","find","pokemon","id","getPokemonTypeList","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\Users\\utilisateur\\Desktop\\GIT\\ng-pokemon-app\\src\\app\\pokemon\\pokemon.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Pokemon } from './pokemon';\r\nimport { POKEMONS } from './mock-pokemon-list';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable(\r\n  // {\r\n  // décorateur permet d'indiquer à Angular que notre service peut lui même avoir d'autres dépendances. Pour brancher ce service avec le mécanisms d'injection de dépendances d'Angular.\r\n  // providedIn: 'root'// retiré pour n'être injecté que dans le module considéré\r\n  // cette ppt indique à Angular que l'on veut utiliser la même instance du service à travers toute l'app. Nous ne créerons jamais d'instance nous même\r\n// }\r\n)\r\nexport class PokemonService {\r\n\r\nconstructor(private http: HttpClient) {\r\n\r\n}\r\n\r\n  getPokemonList(): Pokemon [] {\r\n    // renvoie model\r\n    // return POKEMONS;\r\n    // liste des pokémons, réencapsulée dans un service pour profiter du syst d'injection de dépendance\r\n  }\r\n\r\n  getPokemonById(pokemonId :number): Pokemon | undefined {\r\n    return POKEMONS.find(pokemon => pokemon.id == pokemonId);\r\n  }\r\n\r\n  getPokemonTypeList(): string[] {\r\n    return [\r\n      'Plante', \r\n      'Feu', \r\n      'Eau', \r\n      'Insecte', \r\n      'Normal', \r\n      'Electrik', \r\n      'Poison', \r\n      'Fée', \r\n      'Vol', \r\n      'Combat', \r\n      'Psy'\r\n    ]; \r\n  }\r\n  \r\n}\r\n"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,qBAAqB;;;AAU9C,OAAM,MAAOC,cAAc;EAE3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAExB;EAEEC,cAAcA,CAAA;IACZ;IACA;IACA;EAAA;EAGFC,cAAcA,CAACC,SAAiB;IAC9B,OAAON,QAAQ,CAACO,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,IAAIH,SAAS,CAAC;EAC1D;EAEAI,kBAAkBA,CAAA;IAChB,OAAO,CACL,QAAQ,EACR,KAAK,EACL,KAAK,EACL,SAAS,EACT,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,KAAK,EACL,KAAK,EACL,QAAQ,EACR,KAAK,CACN;EACH;;AA9BWT,cAAc,C;mBAAdA,cAAc,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdb,cAAc,C;SAAdA,cAAc;EAAAc,OAAA,EAAdd,cAAc,CAAAe;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}