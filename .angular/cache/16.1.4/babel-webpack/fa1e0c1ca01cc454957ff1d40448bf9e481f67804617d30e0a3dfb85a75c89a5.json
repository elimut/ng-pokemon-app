{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../pokemon.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../pokemon-type-color.pipe\";\nfunction PokemonFormComponent_form_0_p_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p\")(1, \"label\")(2, \"input\", 23);\n    i0.ɵɵlistener(\"change\", function PokemonFormComponent_form_0_p_29_Template_input_change_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const type_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.selectType($event, type_r7));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\")(4, \"div\");\n    i0.ɵɵpipe(5, \"pokemonTypeColor\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const type_r7 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"id\", type_r7);\n    i0.ɵɵproperty(\"value\", type_r7)(\"checked\", ctx_r6.hasType(type_r7))(\"disabled\", !ctx_r6.isTypesValid(type_r7));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", type_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(i0.ɵɵpipeBind1(5, 9, type_r7));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", type_r7, \" \");\n  }\n}\nfunction PokemonFormComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 2, 3);\n    i0.ɵɵlistener(\"ngSubmit\", function PokemonFormComponent_form_0_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onSubmit());\n    });\n    i0.ɵɵelementStart(2, \"div\", 4)(3, \"div\", 5)(4, \"div\", 6)(5, \"div\", 7)(6, \"label\", 8);\n    i0.ɵɵtext(7, \"Nom\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 9, 10);\n    i0.ɵɵlistener(\"ngModelChange\", function PokemonFormComponent_form_0_Template_input_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.pokemon.name = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 11);\n    i0.ɵɵtext(11, \" Le nom du pok\\u00E9mon est requis (1-25). \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 7)(13, \"label\", 12);\n    i0.ɵɵtext(14, \"Point de vie\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"input\", 13, 14);\n    i0.ɵɵlistener(\"ngModelChange\", function PokemonFormComponent_form_0_Template_input_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.pokemon.hp = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 11);\n    i0.ɵɵtext(18, \" Les points de vie du pok\\u00E9mon sont compris entre 0 et 999. \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"div\", 7)(20, \"label\", 15);\n    i0.ɵɵtext(21, \"D\\u00E9g\\u00E2ts\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"input\", 16, 17);\n    i0.ɵɵlistener(\"ngModelChange\", function PokemonFormComponent_form_0_Template_input_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.pokemon.cp = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 11);\n    i0.ɵɵtext(25, \" Les d\\u00E9g\\u00E2ts du pok\\u00E9mon sont compris entre 0 et 99. \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(26, \"form\", 7)(27, \"label\", 18);\n    i0.ɵɵtext(28, \"Types\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(29, PokemonFormComponent_form_0_p_29_Template, 7, 11, \"p\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(30, \"div\", 20);\n    i0.ɵɵelementStart(31, \"div\", 21)(32, \"button\", 22);\n    i0.ɵɵtext(33, \" Valider\");\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(1);\n    const _r3 = i0.ɵɵreference(9);\n    const _r4 = i0.ɵɵreference(16);\n    const _r5 = i0.ɵɵreference(23);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.pokemon.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hidden\", _r3.valid || _r3.pristine);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.pokemon.hp);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hidden\", _r4.valid || _r4.pristine);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.pokemon.cp);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hidden\", _r5.valid || _r5.pristine);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.types);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", !_r2.form.valid);\n  }\n}\nfunction PokemonFormComponent_h3_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\", 24);\n    i0.ɵɵtext(1, \"Aucun pok\\u00E9mon \\u00E0 \\u00E9diter...\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class PokemonFormComponent {\n  constructor(pokemonService, router) {\n    this.pokemonService = pokemonService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.types = this.pokemonService.getPokemonTypeList();\n  }\n  hasType(type) {\n    return this.pokemon.types.includes(type);\n    // est ce que le pokemon de @input a le type passé en paramètre\n  }\n\n  selectType(event, type) {\n    // coche ou décoche une case, si type est dispo dans le pokémon soit retirer soit ajouter. clic\n    const isChecked = event.target.checked;\n    if (isChecked) {\n      this.pokemon.types.push(type);\n    } else {\n      const index = this.pokemon.types.indexOf(type);\n      this.pokemon.types.splice(index, 1);\n    }\n  }\n  isTypesValid(type) {\n    if (this.pokemon.types.length == 1 && this.hasType(type)) {\n      // on en veut bloquer que la seule case cochée mais pas les autres pour ne pas 0, on utilise hasType. Si un seul type et le type courant on bloque la checkbox\n      return false;\n    }\n    if (this.pokemon.types.length > 2 && !this.hasType(type)) {\n      return false;\n      // n'appartient pas au type courant voir template disabled\n    }\n\n    return true;\n  }\n  // 2 cas d'erreur à définir moins d'un type ou plus de trois => bloquer les checkbox, sinon valid renvoie true\n  onSubmit() {\n    // console.log('Submit form!');\n    // mise en place router pour redir sur le pokémon modifié\n    // this.router.navigate(['/pokemon', this.pokemon.id]);\n    this.pokemonService.updatePokemon(this.pokemon).subscribe(() => this.router.navigate(['/pokemon', this.pokemon.id])); //, si erreur (error) => snackbar error);\n    // on récup le pokemon renvoyé par update et l'on redirige vers la page qui vient d'être éditée\n  }\n}\n\nPokemonFormComponent.ɵfac = function PokemonFormComponent_Factory(t) {\n  return new (t || PokemonFormComponent)(i0.ɵɵdirectiveInject(i1.PokemonService), i0.ɵɵdirectiveInject(i2.Router));\n};\nPokemonFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PokemonFormComponent,\n  selectors: [[\"app-pokemon-form\"]],\n  inputs: {\n    pokemon: \"pokemon\"\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[3, \"ngSubmit\", 4, \"ngIf\"], [\"class\", \"center\", 4, \"ngIf\"], [3, \"ngSubmit\"], [\"pokemonForm\", \"ngForm\"], [1, \"row\"], [1, \"col\", \"s8\", \"offset-s2\"], [1, \"card-panel\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"required\", \"\", \"pattern\", \"^[a-zA-Z0-9\\u00E0\\u00E9\\u00E8\\u00E7]{1,25}$\", \"name\", \"name\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"ngModel\"], [1, \"card-panel\", \"red\", \"accent-1\", 3, \"hidden\"], [\"for\", \"hp\"], [\"type\", \"number\", \"id\", \"hp\", \"required\", \"\", \"pattern\", \"^[0-9]{1,3}$\", \"name\", \"hp\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"hp\", \"ngModel\"], [\"for\", \"cp\"], [\"type\", \"number\", \"id\", \"cp\", \"required\", \"\", \"pattern\", \"^[0-9]{1,2}$\", \"name\", \"cp\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"cp\", \"ngModel\"], [\"for\", \"types\"], [4, \"ngFor\", \"ngForOf\"], [1, \"divider\"], [1, \"section\", \"center\"], [\"type\", \"submit\", 1, \"waves-effect\", \"waves-light\", \"btn\", 3, \"disabled\"], [\"type\", \"checkbox\", 1, \"filled-in\", 3, \"id\", \"value\", \"checked\", \"disabled\", \"change\"], [1, \"center\"]],\n  template: function PokemonFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PokemonFormComponent_form_0_Template, 34, 8, \"form\", 0);\n      i0.ɵɵtemplate(1, PokemonFormComponent_h3_1_Template, 2, 0, \"h3\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.pokemon);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.pokemon);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.PatternValidator, i4.NgModel, i4.NgForm, i5.PokemonTypeColorPipe],\n  styles: [\"\\n\\n.ng-valid[required][_ngcontent-%COMP%] {\\n    border-left: 5px solid #42A948;\\n}\\n\\n\\n.ng-invalid[_ngcontent-%COMP%]:not(form) {\\n    border-left: 5px solid #A94442;\\n}\\n\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcG9rZW1vbi9wb2tlbW9uLWZvcm0vcG9rZW1vbi1mb3JtLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOENBQThDO0FBQzlDO0lBQ0ksOEJBQThCO0FBQ2xDO0FBQ0EsZ0VBQWdFO0FBQ2hFO0lBQ0ksOEJBQThCO0FBQ2xDO0FBQ0Esc0pBQXNKIiwic291cmNlc0NvbnRlbnQiOlsiLyogaW50ZXJjZXB0aW9uIGNsYXNzZXMgZm91cm5pZXIgcGFyIEFuZ3VsYXIgKi9cclxuLm5nLXZhbGlkW3JlcXVpcmVkXSB7XHJcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkICM0MkE5NDg7XHJcbn1cclxuLyogcHLDg8KpY2lzaW9uIGF2ZWMgYXR0IHJlcXVpcmVkIHF1ZSBzdXIgbGVzIGNoYW1wcyBuYW1lLCBwdiwuLi4gKi9cclxuLm5nLWludmFsaWQ6bm90KGZvcm0pIHtcclxuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgI0E5NDQ0MjtcclxufVxyXG4vKiBwYXMgZGVzIMODwqlsw4PCqW1lbnRzIGRlIHR5cGVzIGZvcm0gY29tbWUgaW5wdXQgc2VsZWN0IHNhdWYgbml2ZWF1IGZvcm11bGFpcmUgY2FyIEFuZ3VsYXIgc2kgcWxxIGNob3NlIGludmFsaWRlIHZhIGxlIG1ldHRyZSBzdXIgdG91dCBsZSBmb3JtdWxhaXJlLi4uICovIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","PokemonFormComponent_form_0_p_29_Template_input_change_2_listener","$event","restoredCtx","ɵɵrestoreView","_r9","type_r7","$implicit","ctx_r8","ɵɵnextContext","ɵɵresetView","selectType","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵpropertyInterpolate","ɵɵproperty","ctx_r6","hasType","isTypesValid","ɵɵattribute","ɵɵclassMap","ɵɵpipeBind1","ɵɵtextInterpolate1","PokemonFormComponent_form_0_Template_form_ngSubmit_0_listener","_r11","ctx_r10","onSubmit","PokemonFormComponent_form_0_Template_input_ngModelChange_8_listener","ctx_r12","pokemon","name","PokemonFormComponent_form_0_Template_input_ngModelChange_15_listener","ctx_r13","hp","PokemonFormComponent_form_0_Template_input_ngModelChange_22_listener","ctx_r14","cp","ɵɵtemplate","PokemonFormComponent_form_0_p_29_Template","ɵɵelement","ctx_r0","_r3","valid","pristine","_r4","_r5","types","_r2","form","PokemonFormComponent","constructor","pokemonService","router","ngOnInit","getPokemonTypeList","type","includes","event","isChecked","target","checked","push","index","indexOf","splice","length","updatePokemon","subscribe","navigate","id","ɵɵdirectiveInject","i1","PokemonService","i2","Router","selectors","inputs","decls","vars","consts","template","PokemonFormComponent_Template","rf","ctx","PokemonFormComponent_form_0_Template","PokemonFormComponent_h3_1_Template"],"sources":["C:\\Users\\orion\\Desktop\\github\\ng-pokemon-app\\src\\app\\pokemon\\pokemon-form\\pokemon-form.component.ts","C:\\Users\\orion\\Desktop\\github\\ng-pokemon-app\\src\\app\\pokemon\\pokemon-form\\pokemon-form.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { PokemonService } from '../pokemon.service';\r\nimport { Pokemon } from '../pokemon';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-pokemon-form',\r\n  templateUrl: './pokemon-form.component.html',\r\n  styleUrls: ['./pokemon-form.component.css']\r\n})\r\n\r\nexport class PokemonFormComponent {\r\n\r\n  @Input() pokemon: Pokemon;\r\n  // passer ppt entrée pokemon pour éditer dans le forms\r\n  types: string[];\r\n\r\n  constructor(\r\n    private pokemonService: PokemonService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.types = this.pokemonService.getPokemonTypeList();\r\n  }\r\n\r\n  hasType(type: string) : boolean{\r\n    return this.pokemon.types.includes(type);\r\n    // est ce que le pokemon de @input a le type passé en paramètre\r\n  }\r\n\r\n  selectType(event: Event, type: string) {\r\n    // coche ou décoche une case, si type est dispo dans le pokémon soit retirer soit ajouter. clic\r\n    const isChecked: boolean = (event.target as HTMLInputElement).checked;\r\n\r\n    if(isChecked) {\r\n      this.pokemon.types.push(type);\r\n    } else{\r\n      const index = this.pokemon.types.indexOf(type);\r\n      this.pokemon.types.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  isTypesValid(type: string): boolean {\r\n\r\n    if(this.pokemon.types.length == 1 && this.hasType(type)) {\r\n      // on en veut bloquer que la seule case cochée mais pas les autres pour ne pas 0, on utilise hasType. Si un seul type et le type courant on bloque la checkbox\r\n      return false;\r\n    }\r\n\r\n    if(this.pokemon.types.length > 2 && !this.hasType(type)) {\r\n      return false;\r\n      // n'appartient pas au type courant voir template disabled\r\n    }\r\n\r\n    return true;\r\n  }\r\n  // 2 cas d'erreur à définir moins d'un type ou plus de trois => bloquer les checkbox, sinon valid renvoie true\r\n\r\n  onSubmit() {\r\n    // console.log('Submit form!');\r\n    // mise en place router pour redir sur le pokémon modifié\r\n    // this.router.navigate(['/pokemon', this.pokemon.id]);\r\n    this.pokemonService.updatePokemon(this.pokemon)\r\n      .subscribe(() => this.router.navigate(['/pokemon', this.pokemon.id]));//, si erreur (error) => snackbar error);\r\n      // on récup le pokemon renvoyé par update et l'on redirige vers la page qui vient d'être éditée\r\n  }\r\n}\r\n\r\n","<form *ngIf=\"pokemon\" (ngSubmit)=\"onSubmit()\" #pokemonForm=\"ngForm\">\r\n<!-- si j'ai un pokemon avec id valide => formulaire. event ngSubmit, construit par dessus event natif du DOM dans le nav. décla #var référencée par le template, var référencée vers l'élément du DOM form, dans la var référencée du template attribution du rsl de la directive ngForm => on l'utilise pour déclarer une var directement dans le template, cette var va devenir un objet gérée par angular (erx: etat de validité du form en temps réel) -->\r\n<!-- ngForm formulaire nv global -->\r\n    <div class=\"row\">\r\n      <div class=\"col s8 offset-s2\">\r\n        <div class=\"card-panel\">\r\n    \r\n          <!-- Pokemon name -->\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">Nom</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"name\"\r\n                    required\r\n                    pattern=\"^[a-zA-Z0-9àéèç]{1,25}$\"\r\n                   [(ngModel)]=\"pokemon.name\" name=\"name\"\r\n                   #name=\"ngModel\">\r\n                   <!-- règle de validation au HTML lié à Angular pour la validté du champ -->\r\n                   <!-- ppt ngModel crochet => property binding qui permet de pousser les données de la classe du composant vers le template + ()  syntaxe de liason des event, pour remonter des event du template vers sa classe. Combi des deux => liaison de données bidirectionnelle -->\r\n                   <!-- rst du ngModel qui en interne pour Angular est un objet métier qui va représenter un chamo sera attribué àune var réf dans le template. On va pour voir binder cette ppt pour la réutiliser voir ci-dessous-->\r\n                  <!-- ngModel un champ -->\r\n            <div [hidden]=\"name.valid || name.pristine\"\r\n                  class=\"card-panel red accent-1\">\r\n                  Le nom du pokémon est requis (1-25).\r\n            </div>\r\n            <!-- si champ valide on garde si champ intouché on attend l'intéraction au moins 1 fois -->\r\n          </div>\r\n    \r\n          <!-- Pokemon hp -->\r\n          <div class=\"form-group\">\r\n            <label for=\"hp\">Point de vie</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"hp\"\r\n                    required\r\n                    pattern=\"^[0-9]{1,3}$\"\r\n                   [(ngModel)]=\"pokemon.hp\" name=\"hp\"\r\n                   #hp=\"ngModel\">\r\n             <div [hidden]=\"hp.valid || hp.pristine\"\r\n                   class=\"card-panel red accent-1\">\r\n                   Les points de vie du pokémon sont compris entre 0 et 999.\r\n             </div>\r\n             <!-- Si champ mal renseigné.\r\n            Message d'erreur est masqué si la propriété name est valide ou non modifiée, grâce à l'attribut pristine. -->\r\n          </div>\r\n    \r\n          <!-- Pokemon cp -->\r\n          <div class=\"form-group\">\r\n            <label for=\"cp\">Dégâts</label>\r\n            <input type=\"number\" class=\"form-control\" id=\"cp\"\r\n                    required\r\n                    pattern=\"^[0-9]{1,2}$\"\r\n                   [(ngModel)]=\"pokemon.cp\" name=\"cp\"\r\n                   #cp=\"ngModel\">\r\n             <div [hidden]=\"cp.valid || cp.pristine\"\r\n                   class=\"card-panel red accent-1\">\r\n                   Les dégâts du pokémon sont compris entre 0 et 99.\r\n             </div>\r\n          </div>\r\n    \r\n          <!-- Pokemon types -->\r\n          <form class=\"form-group\">\r\n            <label for=\"types\">Types</label>\r\n            <p *ngFor=\"let type of types\">\r\n              <label>\r\n                <input type=\"checkbox\"\r\n                  class=\"filled-in\"\r\n                  id=\"{{ type }}\"\r\n                  [value]=\"type\"\r\n                  [checked]=\"hasType(type)\"\r\n                  [disabled]=\"!isTypesValid(type)\"\r\n                  (change)=\"selectType($event, type)\"/>\r\n                  <!-- si 3 champs désactive les checkbox, si un seul on freeze également => disabled -->\r\n                <span [attr.for]=\"type\">\r\n                  <div class=\"{{ type | pokemonTypeColor }}\">\r\n                    {{ type }}\r\n                  </div>\r\n                </span>\r\n              </label>\r\n            </p>\r\n          </form>\r\n    \r\n          <!-- Submit button -->\r\n          <div class=\"divider\"></div>\r\n          <div class=\"section center\">\r\n            <button type=\"submit\"\r\n              class=\"waves-effect waves-light btn\"\r\n              [disabled]=\"!pokemonForm.form.valid\">\r\n              <!-- bindig sur ppt diabled , bouton en permanence désactivé si form invalide, pokemonform est la var du haut réf dans le template  qui est le rst de la directive ngForm -->\r\n              Valider</button>\r\n          </div>\r\n    \r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  <h3 *ngIf=\"!pokemon\" class=\"center\">Aucun pokémon à éditer...</h3>\r\n  <!-- si URL avec id inconnu -->\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}