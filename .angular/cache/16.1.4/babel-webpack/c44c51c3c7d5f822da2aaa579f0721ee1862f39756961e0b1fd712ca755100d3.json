{"ast":null,"code":"import { delay, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLoggedIn = false;\n  }\n  // si user demande à accèder à la liste des pokemons ou autre, et qu'il n'a pas le droit demande de co, et si co ok redir au bon endroit sur la page\n  login(name, password) {\n    const isLoggedIn = name == \"pikachu\" && password == 'pikachu';\n    // recup rst pour savoir si user auth ou non, puis délègue dans le tps d'une scd et ensuite mise à jour ppt isLoggedIn\n    return of(isLoggedIn).pipe(delay(1000), tap(isLoggedIn => this.isLoggedIn = isLoggedIn)\n    // simuler délai serveur\n    );\n  }\n\n  logout() {\n    this.isLoggedIn = false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["delay","of","tap","AuthService","constructor","isLoggedIn","login","name","password","pipe","logout","factory","ɵfac","providedIn"],"sources":["C:\\Users\\utilisateur\\Desktop\\GIT\\ng-pokemon-app\\src\\app\\auth.service.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { Observable, delay, of, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  isLoggedIn: boolean = false;\n  // var qui dit si user est co ou non, par défaut à false, déco. Il doit prouver qu'il a les bons id\n  redirectUrl: string;\n  // si user demande à accèder à la liste des pokemons ou autre, et qu'il n'a pas le droit demande de co, et si co ok redir au bon endroit sur la page\n\n  login(name: string, password: string): Observable<boolean> {\n    const isLoggedIn = (name == \"pikachu\" && password =='pikachu');\n    // recup rst pour savoir si user auth ou non, puis délègue dans le tps d'une scd et ensuite mise à jour ppt isLoggedIn\n    return of(isLoggedIn).pipe\n      (delay(1000),\n      tap(isLoggedIn => this.isLoggedIn = isLoggedIn)\n    // simuler délai serveur\n      );\n  }\n\n  logout() {\n    this.isLoggedIn = false;\n  }\n  // info reste appli au niveau authService user non co\n}\n"],"mappings":"AAEA,SAAqBA,KAAK,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;AAKjD,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAKE,KAAAC,UAAU,GAAY,KAAK;;EAG3B;EAEAC,KAAKA,CAACC,IAAY,EAAEC,QAAgB;IAClC,MAAMH,UAAU,GAAIE,IAAI,IAAI,SAAS,IAAIC,QAAQ,IAAG,SAAU;IAC9D;IACA,OAAOP,EAAE,CAACI,UAAU,CAAC,CAACI,IAAI,CACvBT,KAAK,CAAC,IAAI,CAAC,EACZE,GAAG,CAACG,UAAU,IAAI,IAAI,CAACA,UAAU,GAAGA,UAAU;IAChD;KACG;EACL;;EAEAK,MAAMA,CAAA;IACJ,IAAI,CAACL,UAAU,GAAG,KAAK;EACzB;;AAnBWF,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAQ,OAAA,EAAXR,WAAW,CAAAS,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}